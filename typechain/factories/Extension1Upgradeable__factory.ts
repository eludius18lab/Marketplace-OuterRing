/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Extension1Upgradeable,
  Extension1UpgradeableInterface,
} from "../Extension1Upgradeable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "c",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "d",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50608f8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638a054ac2146037578063c3da42b8146051575b600080fd5b603f60025481565b60405190815260200160405180910390f35b603f6001548156fea2646970667358221220d404d7f7e316986e489bb0cfea7c9b8d5a5e6ac75f83dcbb938274b59f74d2c864736f6c63430008040033";

export class Extension1Upgradeable__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Extension1Upgradeable> {
    return super.deploy(overrides || {}) as Promise<Extension1Upgradeable>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Extension1Upgradeable {
    return super.attach(address) as Extension1Upgradeable;
  }
  connect(signer: Signer): Extension1Upgradeable__factory {
    return super.connect(signer) as Extension1Upgradeable__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Extension1UpgradeableInterface {
    return new utils.Interface(_abi) as Extension1UpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Extension1Upgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as Extension1Upgradeable;
  }
}
